import{o as n,c as s,a}from"./app.7a3f8ec5.js";const e='{"title":"electron-vue-next","description":"","frontmatter":{},"headers":[{"level":2,"title":"特性清单","slug":"特性清单"},{"level":2,"title":"上手指南","slug":"上手指南"},{"level":3,"title":"配置你的项目信息和构建脚本","slug":"配置你的项目信息和构建脚本"},{"level":2,"title":"项目结构","slug":"项目结构"},{"level":3,"title":"文件目录结构","slug":"文件目录结构"},{"level":3,"title":"主进程和渲染进程的概念","slug":"主进程和渲染进程的概念"},{"level":3,"title":"NPM 脚本","slug":"npm-脚本"},{"level":2,"title":"开发","slug":"开发"},{"level":3,"title":"服务 (Service)","slug":"服务-service"},{"level":3,"title":"Preload","slug":"preload"},{"level":3,"title":"在渲染进程中使用 Hooks (Composable)","slug":"在渲染进程中使用-hooks-composable"},{"level":3,"title":"在渲染进程中使用 Electron API","slug":"在渲染进程中使用-electron-api"},{"level":3,"title":"管理依赖","slug":"管理依赖"},{"level":3,"title":"添加一个新的窗口","slug":"添加一个新的窗口"},{"level":3,"title":"多线程 (Thread Worker)","slug":"多线程-thread-worker"},{"level":3,"title":"在 VSCode 中 Debug","slug":"在-vscode-中-debug"},{"level":3,"title":"可选项: 在渲染进程中使用 Node 模块","slug":"可选项-在渲染进程中使用-node-模块"},{"level":2,"title":"构建","slug":"构建"},{"level":3,"title":"编译流程","slug":"编译流程"},{"level":3,"title":"在构建中剔除某些具体文件","slug":"在构建中剔除某些具体文件"},{"level":2,"title":"发布","slug":"发布"},{"level":3,"title":"自动更新的支持","slug":"自动更新的支持"}],"relativePath":"zh/index.md","lastUpdated":1612773838818}',t={},o=a('<h1 id="electron-vue-next"><a class="header-anchor" href="#electron-vue-next" aria-hidden="true">#</a> electron-vue-next</h1><p>此仓库包含了一个用于快速上手 vue-next 和 electron 的模板~</p><p><em>我通过使用 <a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener noreferrer">electron-vue</a>，学习了如何使用 electron 和 vue。所以这个项目很大程度上受到了它的启发。</em></p><h2 id="特性清单"><a class="header-anchor" href="#特性清单" aria-hidden="true">#</a> 特性清单</h2><ul><li>Electron 10 <ul><li>遵从 <a href="https://www.electronjs.org/docs/tutorial/security" target="_blank" rel="noopener noreferrer"> 安全性，原生能力和你的责任 </a> 这篇文章的指导，将 renderer 进程配置为纯“浏览器环境”（没有 node 环境）</li><li>使用 <a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener noreferrer">electron-builder</a> 来构建项目</li></ul></li><li>跟随 <a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener noreferrer">vue-next</a> 的新生态 <ul><li>使用 <a href="https://github.com/vitejs/vite" target="_blank" rel="noopener noreferrer">vite</a> 来构建 renderer 进程，热重载速度非常之快</li><li>使用 <a href="https://github.com/vuejs/vuex/tree/4.0" target="_blank" rel="noopener noreferrer">vuex 4.0</a>，并自带类型推断代码，尽可能利用 typescript 的类型系统</li><li>使用了新的 <a href="https://github.com/vuejs/vue-router-next" target="_blank" rel="noopener noreferrer">vue-router-next</a></li></ul></li><li>内置 <a href="https://www.npmjs.com/package/eslint" target="_blank" rel="noopener noreferrer">eslint</a>，默认使用 Javascript Standard</li><li>内置 TypeScript <ul><li>使用 <a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener noreferrer">esbuild</a> 和 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener noreferrer">rollup</a> 来构建 main 进程的 typescript（和 vite 使用的 esbuild 版本相同）</li></ul></li><li>开箱即用的 NodeJS 多线程支持 <ul><li>模板中已经把 worker script 的打包过程配置好了，使用时无需再调整构建配置</li></ul></li><li>开箱即用的 preload 的支持 <ul><li>模板中已经把 preload 的打包过程配置好了，使用时无需再调整构建配置</li><li>在开发模式下支持 preload 自动重载。preload script 的变化不会导致整个 Electron App 重启。</li></ul></li><li>开箱即用的 Github Action 发布流程 <ul><li>自动升级版本号并且生成更变日志，只要你的 git commits 遵从 <a href="https://www.conventionalcommits.org/en/v1.0.0" target="_blank" rel="noopener noreferrer">Conventional Commits</a></li><li>具体细节你可以在 <a href="#%E5%8F%91%E5%B8%83">发布</a> 这个章节查找</li></ul></li><li>和 VSCode 集成 <ul><li>自带 VSCode 的 Debug 配置。可以在 VSCode 中 debug typescript 和 vue 文件，main 和 renderer 的都可以。</li><li>具体实现细节可以看 <a href="#%E5%9C%A8-vscode-%E4%B8%AD-debug">Debug</a> 这个章节</li></ul></li><li>支持多窗口 <ul><li>可以简单地让 App 增加一个新的窗口，详情参见 <a href="#%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%AA%97%E5%8F%A3">如何添加一个新的窗口</a></li></ul></li></ul><h2 id="上手指南"><a class="header-anchor" href="#上手指南" aria-hidden="true">#</a> 上手指南</h2><p>通过 npm init 来创建模板:</p><p><code>npm init electron-vue-next</code></p><p>之后在仓库根目录下:</p><div class="language-shell"><pre><code><span class="token comment"># 安装依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span>\n\n<span class="token comment"># 创建 dev 服务器，将启动 electron 和 vite 的热重载服务器</span>\n<span class="token function">npm</span> run dev\n\n<span class="token comment"># 可选. 将 main 和 renderer 进程编译成 JavaScript，并显示输出大小</span>\n<span class="token function">npm</span> run build\n\n<span class="token comment"># 可选. 将所有编译输出打包到一个 electron 应用程序中，以文件夹形式存在</span>\n<span class="token function">npm</span> run build:dir\n\n<span class="token comment"># 将所有输出打包到实际的 electron 安装包中</span>\n<span class="token function">npm</span> run build:production\n\n</code></pre></div><h3 id="配置你的项目信息和构建脚本"><a class="header-anchor" href="#配置你的项目信息和构建脚本" aria-hidden="true">#</a> 配置你的项目信息和构建脚本</h3><p>在你安装完项目依赖之后，你应该首先去 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/package.json" target="_blank" rel="noopener noreferrer">package.json</a> 中更改项目基本信息，如项目名，作者信息，git 仓库地址等。 同时你需要更新构建信息 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/scripts/build.base.config.js" target="_blank" rel="noopener noreferrer">build.base.config.js</a>，</p><h2 id="项目结构"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h2><h3 id="文件目录结构"><a class="header-anchor" href="#文件目录结构" aria-hidden="true">#</a> 文件目录结构</h3><p>整个项目的文件结构大概如此：</p><div class="language-"><pre><code>your-project\n├─ scripts                 所有的脚本文件夹，比如 build 的脚本就在这放着\n├─ build                   build 使用的资源文件，同时也是 build 的输出文件夹\n│  └─ icons/               build 使用的图标文件\n├─ dist\n│  └─ electron/            编译后的js会在这\n├─ src\n│  ├─ main\n│  │  ├─ dialog.ts         对 electron dialog API 的简单封装，让 renderer 可以使用 dialog\n│  │  ├─ global.ts         typescript 的一些全局定义\n│  │  ├─ index.dev.ts      rollup 开发环境的入口文件\n│  │  ├─ index.prod.ts     rollup 生产环境的入口文件\n│  │  ├─ index.ts          共享的入口文件，基本逻辑都从这开始\n│  │  ├─ logger.ts         一个简单的 Logger\n│  │  └─ staticStore.ts\n│  ├─ preload\n│  │  ├─ index.ts          preload 入口\n│  │  └─ another.ts        另一个 preload 入口\n│  ├─ renderer\n│  │  ├─ assets/           assets 文件夹\n│  │  ├─ components/       所有 vue components\n│  │  ├─ router.ts         vue-router 初始代码\n│  │  ├─ store.ts          vuex 初始代码\n│  │  ├─ App.vue           Vue 文件的入口文件，被 index.ts 导入\n│  │  ├─ index.css         vite 会编译的 css 的入口文件\n│  │  ├─ index.html        vite 会编译的 html 的入口文件\n│  │  └─ index.ts          vite 会编译的 typescript 的入口文件\n│  └─ shared               在 main 和 renderer 之间共享的代码文件夹，其中代码两边都可以 import 到\n│     ├─ store/            vuex store 的定义\n│     └─ sharedLib.ts      一个简单的 main/renderer 共享模块的例子\n├─ static/                 静态资源文件夹\n├─ .eslintrc.js\n├─ .gitignore\n├─ package.json\n└─ README.md\n</code></pre></div><h4 id="assets-静态资源-static-构建资源-有啥区别？"><a class="header-anchor" href="#assets-静态资源-static-构建资源-有啥区别？" aria-hidden="true">#</a> assets, 静态资源 (static), 构建资源... 有啥区别？</h4><p>assets 文件只在 Renderer 进程中使用，他们会被 vite，也就是 rollup 系统打包到最终的构建文件中，你可以直接在 vue/ts 文件中 import 他们，基本上不用自己关心。assets 默认位置在 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/src/renderer/assets" target="_blank" rel="noopener noreferrer">renderer/renderer/assets</a></p><p>静态资源，指的是一些需要被 main 进程在运行中使用的文件，比如你的系统托盘小图标 (Tray) 就需要放在 static 文件夹中，在运行时通过文件系统 (fs) 获取。或如你需要在 Windows 下运行一段 powershell，这些 powershell 文件通常就需要放在 static 文件夹下，并且在构建配置文件中明确标出 asarUnpack。默认静态文件夹在 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/static" target="_blank" rel="noopener noreferrer">static</a>。</p><p>而构建资源是指那些被 <code>electron-builder</code> 使用的资源，他们会用来构建安装包等。例如程序的图标，安装程序的自定义脚本等。默认的程序图标放在 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/build/icons" target="_blank" rel="noopener noreferrer">build/icons</a> 里。</p><p><em>请注意你的程序图标可能需要在各种地方使用！不要混淆他们！</em></p><ul><li><em>对于安装包图标, 他们应该在 <code>build/icons</code>，这会影响例如安装包图标，或者在 File Explorer 中显示的图标</em></li><li><em>对于静态资源中的图标，一般是用作于设置 <strong>(系统托盘) tray</strong> 或者当前窗口在任务栏的图标</em></li><li><em>对于在 assets 中的图标，这些一般使用在页面内显示 logo</em></li></ul><h3 id="主进程和渲染进程的概念"><a class="header-anchor" href="#主进程和渲染进程的概念" aria-hidden="true">#</a> 主进程和渲染进程的概念</h3><p>从 Electron 官方文档 <a href="https://www.electronjs.org/docs/tutorial/quick-start#main-and-renderer-processes" target="_blank" rel="noopener noreferrer">main and renderer processes</a> 引用的解释。主进程 (main process) 是</p><blockquote><ul><li>主进程通过创建 BrowserWindow 实例来创建 网页。 每一个 BrowserWindow 实例在其渲染过程中运行网页， 当一个 BrowserWindow 实例被销毁时，对应的渲染过程也会被终止。</li><li>主进程 管理 所有网页及其对应的渲染进程。</li></ul></blockquote><p>而渲染进程 (renderer process) 则是</p><blockquote><ul><li>渲染进程只能管理相应的网页， 一个渲染进程的崩溃不会影响其他渲染进程。</li><li>渲染进程通过 IPC 与主进程通信在网在页上执行 GUI 操作。 出于安全和可能的资源泄漏考虑，直接从渲染器进程中调用与本地 GUI 有关的 API 受到限制。</li></ul></blockquote><p>一般来讲，主进程包含了你的核心业务逻辑，而渲染进程则负责显示。当然这不绝对，有些人认为主进程就应该只负责一些和系统交互的操作，不应该有重 CPU 的操作，因为如果主进程 CPU 负荷过高会将整个 App 卡住（幸好 Nodejs 大部分 IO API 都是 async，并不会卡住整个 app）。因此如果你有一些非常吃 CPU 的工作，应该考虑用 nodejs 的 <a href="https://nodejs.org/api/worker_threads.html" target="_blank" rel="noopener noreferrer">worker_thread</a> 把他们放到别的线程中。</p><p>所以这方面的设计和你的 app 的业务高度相关，如果你的业务只是有频繁的 IO 操作，把这些逻辑放在 main 也没什么问题。如果你的业务需要占用 CPU 很长时间，你则需要考虑把他们放在 main 进程之外的地方了。</p><p>根据 electron 的 <a href="https://www.electronjs.org/docs/tutorial/security" target="_blank" rel="noopener noreferrer">security</a> 教程。在这个模板中，renderer 进程 <a href="https://www.electronjs.org/docs/tutorial/security#2-do-not-enable-nodejs-integration-for-remote-content" target="_blank" rel="noopener noreferrer">默认情况下 <strong>并没有</strong> 权限去访问 nodejs 的模块</a>. Electron 在 <code>webPreferences</code> 里提供了 <code>preload</code> 选项来处理这种问题。在这个模板中，我们则提供了 <code>Service</code> 来处理这个问题。</p><p><code>Service</code> 是一系列定义在 <code>src/main/services</code> 文件夹下的 class。<code>Service</code> 所有的 public 方法，经过我们的封装，都可以简单地在 renderer 进程访问。 它也可以看作一个 main 和 renderer 进程之间的桥梁。你可以参考 <a href="#%E6%9C%8D%E5%8A%A1-service">Service</a> 章节来一探究竟。</p><h3 id="npm-脚本"><a class="header-anchor" href="#npm-脚本" aria-hidden="true">#</a> NPM 脚本</h3><h4 id="npm-run-dev"><a class="header-anchor" href="#npm-run-dev" aria-hidden="true">#</a> <code>npm run dev</code></h4><p>开启 vite 开发环境，vite 将提供 renderer （浏览器端）的热重载。 同时开启一个 rollup 开发环境，检测 main 端的代码变化，如果 main 的代码有变动，它会自动重启你的整个 electron 程序。</p><h4 id="npm-run-build"><a class="header-anchor" href="#npm-run-build" aria-hidden="true">#</a> <code>npm run build</code></h4><p>将 <code>main</code> 和 <code>renderer</code> 的代码编译到 production 环境, 输出的代码在 <code>dist/electron</code></p><h4 id="npm-run-build-production"><a class="header-anchor" href="#npm-run-build-production" aria-hidden="true">#</a> <code>npm run build:production</code></h4><p>编译所有代码，并且使用 <code>electron-builder</code> 来你的 app build 成可执行的 exe 文件或者 zip 等。这个的配置文件在 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/scripts/build.base.config.js" target="_blank" rel="noopener noreferrer">scripts/build.base.config.js</a>。</p><h4 id="npm-run-build-dir"><a class="header-anchor" href="#npm-run-build-dir" aria-hidden="true">#</a> <code>npm run build:dir</code></h4><p>编译所有代码, 并且使用 <code>electron-builder</code> 编译你的 app 到 production 环境，但它只输出文件夹形式的 build （不打包成安装程序），比如对于 windows x64，他会把你的程序编译到 <code>build/win-unpacked</code>，并不输出 installer。</p><p>自然，这个会比 <code>npm run build:production</code> 快。你可以使用它来快速测试 production 的软件运行状况。</p><h4 id="npm-run-lint"><a class="header-anchor" href="#npm-run-lint" aria-hidden="true">#</a> <code>npm run lint</code></h4><p>使用 eslint 来检查代码风格。</p><h4 id="npm-run-lint-fix"><a class="header-anchor" href="#npm-run-lint-fix" aria-hidden="true">#</a> <code>npm run lint:fix</code></h4><p>使用 eslint 来检查代码风格并尽可能的修复。</p><h2 id="开发"><a class="header-anchor" href="#开发" aria-hidden="true">#</a> 开发</h2><p>本项目默认遵从 <a href="https://www.electronjs.org/docs/tutorial/security" target="_blank" rel="noopener noreferrer">security</a>。在默认情况下，Renderer (浏览器) 不能访问 NodeJS 的模块，这意味着你不能在浏览器中直接访问 fs 来读写文件。你需要通过使用 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/src/main/services/Service.ts" target="_blank" rel="noopener noreferrer">Service</a> 来访问 NodeJS 资源。在 vue 中使用 <code>useService(&#39;NameOfService&#39;)</code> 来获得 service 提供的方法。</p><h3 id="服务-service"><a class="header-anchor" href="#服务-service" aria-hidden="true">#</a> 服务 (Service)</h3><p>所有 Service 的实现都放在 <code>src/main/services</code>。Service 应该包含一些 App 与网络、磁盘文件交互的的核心业务逻辑，这些逻辑将运行在主进程。Service 会自动暴露接口到渲染进程，在渲染进程中，你可以通过一个 <code>useService(&#39;NameOfService&#39;)</code> 来直接使用 Service。</p><p>Serivce 本身是完全可选的。之所以有这种设计是因为 Electron 提倡的安全性 <em><strong>如果你认为这个设计是多余的，或者是过度设计，你完全可以移除它。</strong></em></p><h4 id="创建一个新-service"><a class="header-anchor" href="#创建一个新-service" aria-hidden="true">#</a> 创建一个新 Service</h4><p>在 <code>/src/main/services</code> 里添加一个文件叫 <code>BarService.ts</code></p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">BarService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">doSomeCoreLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在这里做一些异步的核心业务逻辑</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>之后你需要把这个 <code>BarService</code> 加到 <code>Services</code> 的接口中，在 <code>src/main/services/index.ts</code> 里：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BarService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./BarService&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Services</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... 一些其他的 Services</span>\n  BarService<span class="token operator">:</span> BarService\n<span class="token punctuation">}</span>\n</code></pre></div><p>之后，你需要把它添加到 <code>src/main/index.ts</code> 的 <code>initializeServices</code> 里：</p><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">initializeServices</span><span class="token punctuation">(</span>logger<span class="token operator">:</span> Logger<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// ... 其他 services 的初始化</span>\n    BarService<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">BarService</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>现在这个 <code>BarService</code> 已经可以被渲染进程调用了，只需要通过 <code>useService(&#39;BarService&#39;)</code> 就可以，详情请见 <a href="#%E5%9C%A8%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%9F%90%E4%B8%AA-service">Using Service in Renderer</a>.</p><h5 id="services-之间的交互"><a class="header-anchor" href="#services-之间的交互" aria-hidden="true">#</a> Services 之间的交互</h5><p>如果你在一个 <code>Service</code> 中想使用其他 <code>Service</code>，比如 <code>FooService</code>。你需要使用 <code>@Inject</code> 装饰器。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">BarService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>\n  @<span class="token function">Inject</span><span class="token punctuation">(</span><span class="token string">&#39;FooService&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">private</span> fooService<span class="token operator">:</span> FooService\n\n  <span class="token keyword">async</span> <span class="token function">doSomeCoreLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fooService<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="在渲染进程-浏览器-中使用某个-service"><a class="header-anchor" href="#在渲染进程-浏览器-中使用某个-service" aria-hidden="true">#</a> 在渲染进程(浏览器)中使用某个 Service</h4><p>在 renderer 进程中，你可以通过 <code>useService(&#39;nameOfService&#39;)</code> 直接访问所有 service 的所有异步（async）方法。</p><p>这是 <a href="./.html">About.vue</a> 里的一个例子，它在使用 <code>BaseService</code>.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Vue logo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../assets/logo.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Electron Version: {{ version }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Appdata Path: {{ path }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Running Platform: {{ platform }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>ts</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../hooks&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> getBasicInformation <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useService</span><span class="token punctuation">(</span><span class="token string">&#39;BaseService&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      version<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n      platform<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">getBasicInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> version<span class="token punctuation">,</span> platform<span class="token punctuation">,</span> root <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      data<span class="token punctuation">.</span>version <span class="token operator">=</span> version\n      data<span class="token punctuation">.</span>path <span class="token operator">=</span> root\n      data<span class="token punctuation">.</span>platform <span class="token operator">=</span> platform\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h4 id="移除-service-架构"><a class="header-anchor" href="#移除-service-架构" aria-hidden="true">#</a> 移除 Service 架构</h4><p>如果你不喜欢 Service 的设计，你可以简单地把他们移除掉：</p><ol><li>删掉整个 <code>src/main/services</code> 文件夹</li><li>删掉 <code>src/main/index.ts</code> 里面的 <code>import { initialize } from &#39;./services&#39;</code> 和 <code>initialize(logger)</code></li></ol><p>当然你可以在 <code>npm init</code> 之初就选择不要 service。</p><h3 id="preload"><a class="header-anchor" href="#preload" aria-hidden="true">#</a> Preload</h3><p>无论你用不用 Service 的设计，你可能都需要考虑 preload，preload 让你能够在 renderer 进程中插入一些安全的可以访问 node 模块的代码。</p><p><em>如果你不知道啥是 preload，你可以阅读 <a href="https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions" target="_blank" rel="noopener noreferrer">electron 关于 BrowserWindow 的官方文档</a>和<a href="https://www.electronjs.org/docs/tutorial/security" target="_blank" rel="noopener noreferrer">官方安全指南</a>.</em></p><p>在这个模板中，我们已经配置好了 preload 的构建流程，所有 preload 都被放在 <code>/src/preload</code> 文件夹下。</p><p>其文件夹下的每个 preload <code>.js/.ts</code> 文件都会被当作一个独立的 rollup 文件入口。</p><p>例如，如果你新加了一个 preload 文件，叫作 <code>/src/preload/my-preload.ts</code>， 你可以通过以下方式在创建 <code>BrowserWindow</code> 时引用它：</p><div class="language-ts"><pre><code><span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>\n    preload<span class="token operator">:</span> __preloads<span class="token punctuation">[</span><span class="token string">&#39;my-preload&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>preload 的 rollup 配置同样放置在 <code>rollup.config.js</code> 中。</p><p>在 <code>dist</code> 文件夹下，每个 preload script 会被编译成 <code>dist/electron/&lt;name&gt;.preload.js</code> 的形式。</p><h3 id="在渲染进程中使用-hooks-composable"><a class="header-anchor" href="#在渲染进程中使用-hooks-composable" aria-hidden="true">#</a> 在渲染进程中使用 Hooks (Composable)</h3><p>Vue 3 的一大特性就是 <a href="https://composition-api.vuejs.org/" target="_blank" rel="noopener noreferrer">composition-api</a>。你可以通过组合模式，将各种简单逻辑在 <code>setup</code> 函数中拼装出复杂的业务逻辑。这些组合函数都默认放在 <code>/src/renderer/hooks</code> 中。</p><p>下面就是官方文档中的例子，你在 <code>/src/renderer/hooks/mouse.ts</code> 里有以下代码：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX\n    y<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY\n  <span class="token punctuation">}</span>\n\n  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>你可以把 <code>mouse.ts</code> 在 <code>/src/renderer/hooks/index.ts</code> 中导出：</p><div class="language-ts"><pre><code><span class="token comment">// 其他导出...</span>\n\n<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./mouse.ts&#39;</span>\n</code></pre></div><p>然后你在 <code>vue</code> 文件中，就可以这样来导入：</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  ...template content\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>ts</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useMousePosition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/@/hooks&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// other logic</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="在渲染进程中使用-electron-api"><a class="header-anchor" href="#在渲染进程中使用-electron-api" aria-hidden="true">#</a> 在渲染进程中使用 Electron API</h3><p>此项目在默认情况下已经封装了一些 electron API 供 renderer 进程使用，例如 <code>useShell</code>, <code>useClipboard</code>, <code>useIpc</code> 和 <code>useDialog</code>。</p><p><em>这些 API 是通过加载 <code>static/preload.js</code> 来实现的。如果你把 preload 在创建 BrowserWindow 的时候给移除了，在 renderer 进程这些就用不了了。</em></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useShell <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/@/hooks&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> shell <span class="token operator">=</span> <span class="token function">useShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这个等价于 import { shell } from &#39;electron&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>一般的 use 风格的 electron API 都等价于直接从 electron import，但是 <code>useDialog</code> 是唯一例外，你只能在其中使用 <code>async</code> 的 API。</p><h3 id="管理依赖"><a class="header-anchor" href="#管理依赖" aria-hidden="true">#</a> 管理依赖</h3><p>如果你想添加新的 npm 包作为依赖使用，你需要注意这个依赖是不是一个基于 nodejs 的模块。如果它是一个 nodejs 的包，你需要把这个包名放进 <code>package.json</code> 的 <code>external</code> 列表中。这个列表是用于告诉 vite 不要优化某些依赖，如果你不在这里剔除他们，vite就会抱怨说“我优化不了这些！”之类的话。</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token comment">// ...other package.json content</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...other dependencies</span>\n    <span class="token property">&quot;a-nodejs-package&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;version&gt;&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;external&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...other existed excluded packages</span>\n    <span class="token string">&quot;a-nodejs-package&quot;</span> <span class="token comment">// your new package</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...rest of package.json</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>当然如果这个依赖是纯 JS 实现，你就不需要把它加到这里面了。</p><h4 id="原生-native-依赖"><a class="header-anchor" href="#原生-native-依赖" aria-hidden="true">#</a> 原生 (Native) 依赖</h4><p>如果你需要使用一些原生依赖（需要在安装时从源码重新构建成二进制的依赖），通常你需要 <a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener noreferrer">node-gyp</a>，但是 <code>electron-builder</code> 会自动帮你重新构建 electron 版本的二进制文件。所以你一般不需要太在意这个。请注意，如果你在用 Windows，你可能需要安装 <a href="https://github.com/felixrieseberg/windows-build-tools" target="_blank" rel="noopener noreferrer">windows-build-tools</a> 来帮助你安装构建依赖的环境。</p><h4 id="自带二进制的依赖"><a class="header-anchor" href="#自带二进制的依赖" aria-hidden="true">#</a> 自带二进制的依赖</h4><p>有一些 package 中含有已经编译好的二进制文件，对于这种 package 我们不但需要把它放进 <code>external</code> 中，还需要对 electron-builder 的配置稍加改动。具体细节请参见 <a href="#%E5%9C%A8%E6%9E%84%E5%BB%BA%E4%B8%AD%E5%89%94%E9%99%A4%E6%9F%90%E4%BA%9B%E5%85%B7%E4%BD%93%E6%96%87%E4%BB%B6">在构建中剔除某些具体文件</a> 章节。当然这对于正常开发流程并没有什么影响。</p><h3 id="添加一个新的窗口"><a class="header-anchor" href="#添加一个新的窗口" aria-hidden="true">#</a> 添加一个新的窗口</h3><ol><li>在 <code>src/renderer</code> 下添加一个新的 html 文件</li><li>在新添加的 html 文件中引用你新写的 ts/js 文件</li><li>在主进程 <code>main/index.ts</code> 中加入一段创建此窗口的代码</li></ol><p>例如你在 <code>src/renderer</code> 下面新增加了 <code>side.html</code> ，你需要在 <code>index.ts</code> 中加入类似以下代码：</p><div class="language-ts"><pre><code>\n<span class="token comment">// 这个方法应该在启动的时候被调用</span>\n<span class="token keyword">function</span> <span class="token function">createANewWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这部分和之前都一样，根据自己需求改</span>\n  <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>\n    width<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n    webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>\n      preload<span class="token operator">:</span> <span class="token function">join</span><span class="token punctuation">(</span>__static<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      contextIsolation<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      nodeIntegration<span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// __windowUrls.side 就是指向你新添加的 html 的 url</span>\n  win<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>__windowUrls<span class="token punctuation">.</span>side<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>在 <code>scripts/vite.config.js</code> 中会自动扫描 <code>src/renderer</code> 下的所有 html 文件，所以一般来说你不需要改 vite 的配置文件。 当然你可以参照 <a href="https://vitejs.dev/guide/build.html#multi-page-app" target="_blank" rel="noopener noreferrer">vite 的官方文档</a>来更加自定义多页面的功能。</p><h3 id="多线程-thread-worker"><a class="header-anchor" href="#多线程-thread-worker" aria-hidden="true">#</a> 多线程 (Thread Worker)</h3><p>如果你想在 main 进程中使用 nodejs 的 <a href="https://nodejs.org/api/worker_threads.html" target="_blank" rel="noopener noreferrer">worker_threads</a>，Worker 脚本需要被独立加载。 我们在这里已经集成了 Worker 脚本的打包构建流程。通常来讲，你不需要修改构建配置就可以添加新的 Worker。</p><p>所有在 <code>src/main/workers</code> 文件夹下的 <code>.js/.ts</code> 文件都会被当作 worker 的 rollup 入口。</p><p>如果你添加了一个叫 <code>src/main/workers/sha256.ts</code> 的 Worker 脚本，你可以这样来创建一个使用它的 Worker：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Worker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;worker_threads&#39;</span>\n\n<span class="token comment">// __workers.sha256 指向着实际编译结果的路径</span>\n<span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>__workers<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span>\n</code></pre></div><p>Worker 的脚本会和普通的 main 进程代码一起在 rollup 中编译，在 <code>rollup.config.js</code> 中他们共享相同的 rollup 配置。</p><p>在 <code>dist</code> 文件夹下, Worker 的脚本会被编译成 <code>dist/electron/&lt;name&gt;.worker.js</code>。</p><h3 id="在-vscode-中-debug"><a class="header-anchor" href="#在-vscode-中-debug" aria-hidden="true">#</a> 在 VSCode 中 Debug</h3><p>本项目内置配置好的 vscode debug 配置。你会在 .vscode/launch.json 中看到以下三个配置</p><ol><li>Electron: Main (attach)</li><li>Electron: Renderer (attach)</li><li>Electron: Main &amp; Renderer (attach)</li></ol><div class="language-json"><pre><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Electron: Main (attach)&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;attach&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceFolder}&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;outFiles&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token string">&quot;${workspaceFolder}/dist/**/*.js&quot;</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;smartStep&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;sourceMaps&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;inspector&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">5858</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;timeout&quot;</span><span class="token operator">:</span> <span class="token number">20000</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Electron: Renderer (attach)&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;chrome&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;attach&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">9222</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;webRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceFolder}&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;timeout&quot;</span><span class="token operator">:</span> <span class="token number">15000</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;compounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Electron: Main &amp; Renderer (attach)&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Electron: Main (attach)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Electron: Renderer (attach)&quot;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果你看得懂的话就比较清晰了. 第一个是 attach 到 Electron 的 main 进程上。第二个是 attach 到 Renderer 进程上（需要 vscode 安装 Chrome Debugger 插件）。第三个则是这俩的合体，两个都 attach 上。</p><p>注意，这些配置都是 attach 模式，你需要先通过 <code>npm run dev</code> 启动 Electron 后使用。</p><h3 id="可选项-在渲染进程中使用-node-模块"><a class="header-anchor" href="#可选项-在渲染进程中使用-node-模块" aria-hidden="true">#</a> 可选项: 在渲染进程中使用 Node 模块</h3><p>默认情况下，渲染进程就是个普通的前端浏览器环境。你不能在里面访问 nodejs 模块。</p><p>如果你是在想在里面用 node 模块，或者你对 service 的设计感到厌倦，你可以直接在你创建 BrowserWindow 之初开启 <code>nodeIntegration</code>。这个属性开启会让你的 renderer 进程也能访问 node。</p><p>比如你可以有如下代码让我们的主窗口能访问 node：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>\n  width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n  webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>\n    preload<span class="token operator">:</span> <span class="token function">join</span><span class="token punctuation">(</span>__static<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 这让这个浏览器可以访问 node</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="构建"><a class="header-anchor" href="#构建" aria-hidden="true">#</a> 构建</h2><p>此项目的构建是直接使用 <a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener noreferrer">electron-builder</a> 来达成的。它的配置主要放在 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/scripts/build.base.config.js" target="_blank" rel="noopener noreferrer">scripts/build.base.config.js</a> 文件中。当然你可以参考 electron-builder 的<a href="https://www.electron.build/" target="_blank" rel="noopener noreferrer">官方文档</a>来使用。</p><h3 id="编译流程"><a class="header-anchor" href="#编译流程" aria-hidden="true">#</a> 编译流程</h3><p>首先，我们会将 typescript/vue 的源码通过 rollup 以 production 模式编译成 JavaScript。rollup 对主进程的编译配置在 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/scripts/rollup.config.js" target="_blank" rel="noopener noreferrer">rollup.config.js</a> 中，它会把编译出来的结果输出到 <code>dist/electron/index.prod.js</code>。</p><p>注意，因为 rollup 是基于 esm 的，对循环依赖的处理没法像 webpack 那样理想，所以在尝试打包不少 nodejs 的 package 时会遇到循环依赖的问题。而你自己对这些 package 没有掌控 （webpack 一般能处理这种循环依赖的问题，并不会直接失败掉），所以此项目默认带的 rollup 构建脚本是不会打包 main 中使用的 nodejs 依赖的，你只要在 <code>package.json</code> 中把他们标注成 <code>external</code>，这些依赖就会以 <code>node_modules</code> 的形式存在于我们的构建输出的 asar 中。所以当你发现 <code>index.prod.js</code> 中没有打包 nodejs 的依赖代码也别感到奇怪就是了。</p><p>而渲染进程的编译配置放在 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/scripts/vite.config.js" target="_blank" rel="noopener noreferrer">vite.config.js</a> 里，它会将结果输出到 <code>dist/electron/renderer/*</code> 里。</p><h3 id="在构建中剔除某些具体文件"><a class="header-anchor" href="#在构建中剔除某些具体文件" aria-hidden="true">#</a> 在构建中剔除某些具体文件</h3><p>通常来讲，如果你的 <code>dependencies</code> 和 <code>external</code> 配置正确，你不需要太担心构建的问题。但是有一些依赖包含了已经编译好的二进制。你可能希望正确打包这些预编译的二进制文件。</p><p>例如, <a href="https://github.com/onikienko/7zip-min" target="_blank" rel="noopener noreferrer">7zip-min</a>:</p><p>因为它引用了 <code>7zip-bin</code>，而 <code>7zip-bin</code> 自带了针对多平台的二进制文件，我们需要妥善处理这些已经 build 好的二进制文件。我们自然不希望在某一个平台的构件中看到另一个平台的二进制文件。 更改 electron-builder 的构建配置: <code>build.base.config.js</code></p><div class="language-js"><pre><code>  asarUnpack<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;node_modules/7zip-bin/**/*&quot;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre></div><p>将他们添加到 <code>asarUnpack</code> 中来保证 electron-builder 在安装后会正确解压这些二进制文件。</p><p>你还需要在 <code>build.config.js</code> 中为每个平台配置 <code>files</code>，这样就不会让某个平台的出现在它不该出现的地方了：</p><div class="language-js"><pre><code>  mac<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... 其他 mac 配置</span>\n    files<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;node_modules/7zip-bin/**/*&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;!node_modules/7zip-bin/linux/**&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;!node_modules/7zip-bin/win/**&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  win<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... 其他 win 配置</span>\n    files<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;node_modules/7zip-bin/**/*&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;!node_modules/7zip-bin/linux/**&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;!node_modules/7zip-bin/mac/**&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  linux<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... 其他 linux 配置</span>\n    files<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;node_modules/7zip-bin/**/*&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;!node_modules/7zip-bin/win/**&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;!node_modules/7zip-bin/mac/**&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><h2 id="发布"><a class="header-anchor" href="#发布" aria-hidden="true">#</a> 发布</h2><p>自带的 github action 会在你每个 PR 提交的时跑 eslint 和 <code>npm run build</code>。并不会做完整的 build （因为 build production 比较花时间，当然你可以自己打开）</p><p>当有新的 push 进了 master branch，github action 会自动在 windows/mac/linux 上 build 生产环境的代码。如果构建都成功了，除了会把构建的输出上传到 github assets 之外，它还会创建一个 PR，其中给你提升了 package.json 的版本号，并且会写新的 changelog 到 <a href="http://changelog.md" target="_blank" rel="noopener noreferrer">changelog.md</a> 中。</p><p>如果你想要它自动生成 changelog，你得遵循 <a href="https://www.conventionalcommits.org/en/v1.0.0" target="_blank" rel="noopener noreferrer">conventional commit guideline</a>。</p><p>实际应用中你只需要检查这个 PR，如果没啥问题点击通过，它就会再 build 一遍，并且将结果发布到 github release 上。</p><p><strong>如果你不需要这种自动流程，你可以将以下文件移除 <a href="https://github.com/ci010/electron-vue-next/tree/master/electron-vue-next/.github/workflows/build.yml" target="_blank" rel="noopener noreferrer">.github/workflows/build.yml</a></strong></p><h3 id="自动更新的支持"><a class="header-anchor" href="#自动更新的支持" aria-hidden="true">#</a> 自动更新的支持</h3><p>这个模板默认自带了 <a href="https://github.com/electron-userland/electron-builder/tree/master/packages/electron-updater" target="_blank" rel="noopener noreferrer">electron-updater</a>。你可以参照 <a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener noreferrer">electron-builder</a> 的流程来实现自动更新。</p>',144);t.render=function(a,e,t,p,c,r){return n(),s("div",null,[o])};export default t;export{e as __pageData};
